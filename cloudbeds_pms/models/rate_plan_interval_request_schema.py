# coding: utf-8

"""
    Cloudbeds API v2

    <p>Welcome to the documentation for <strong>Cloudbeds API Version v2</strong>! If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data for your Cloudbeds customers, then you've come to the right place.</p><p>In this document you will find all the API methods we provide along with explanations for parameters and response examples.</p><p>If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our <a href='https://integrations.cloudbeds.com/hc/en-us'>Integrations Portal</a>.</p><p>Be sure to <a href='https://go.pardot.com/l/308041/2018-07-24/qb2lg'>subscribe</a> to the monthly Cloudbeds API announcement mailing list to receive information on new additions and improvements to the Cloudbeds API and related developer tools.</p><p><strong>Endpoint:</strong> https://api.cloudbeds.com/{method}</p><p><strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it.</p><p><strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded)</p><p><strong>Response Format:</strong> JSON</p><p><strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support and troubleshooting.</p><p><strong><a href='https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection'><img src='https://run.pstmn.io/button.svg' alt='Run in Postman'></a></strong> use this link to access our Public collection in Postman.</p>

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RatePlanIntervalRequestSchema(BaseModel):
    """
    RatePlanIntervalRequestSchema
    """ # noqa: E501
    start_date: date = Field(description="Start date of the interval.", alias="startDate")
    end_date: date = Field(description="End date of the interval.", alias="endDate")
    name: StrictStr = Field(description="Name of the interval.")
    room_type_id: Optional[StrictStr] = Field(default=None, description="Room type ID.", alias="roomTypeId")
    min_overlap: Optional[StrictInt] = Field(default=None, description="Minimum overlap.", alias="minOverlap")
    max_overlap: Optional[StrictInt] = Field(default=None, description="Maximum overlap.", alias="maxOverlap")
    group_code: Optional[StrictStr] = Field(default=None, description="Group code.", alias="groupCode")
    days: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Days of the week pricing (0=Sunday, 1=Monday, etc.).")
    adult_days: Optional[Dict[str, Dict[str, Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Extra adults pricing (0=Sunday, 1=Monday, etc.).", alias="adultDays")
    child_days: Optional[Dict[str, Dict[str, Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Extra children pricing (0=Sunday, 1=Monday, etc.).", alias="childDays")
    __properties: ClassVar[List[str]] = ["startDate", "endDate", "name", "roomTypeId", "minOverlap", "maxOverlap", "groupCode", "days", "adultDays", "childDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RatePlanIntervalRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if min_overlap (nullable) is None
        # and model_fields_set contains the field
        if self.min_overlap is None and "min_overlap" in self.model_fields_set:
            _dict['minOverlap'] = None

        # set to None if max_overlap (nullable) is None
        # and model_fields_set contains the field
        if self.max_overlap is None and "max_overlap" in self.model_fields_set:
            _dict['maxOverlap'] = None

        # set to None if group_code (nullable) is None
        # and model_fields_set contains the field
        if self.group_code is None and "group_code" in self.model_fields_set:
            _dict['groupCode'] = None

        # set to None if days (nullable) is None
        # and model_fields_set contains the field
        if self.days is None and "days" in self.model_fields_set:
            _dict['days'] = None

        # set to None if adult_days (nullable) is None
        # and model_fields_set contains the field
        if self.adult_days is None and "adult_days" in self.model_fields_set:
            _dict['adultDays'] = None

        # set to None if child_days (nullable) is None
        # and model_fields_set contains the field
        if self.child_days is None and "child_days" in self.model_fields_set:
            _dict['childDays'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RatePlanIntervalRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "name": obj.get("name"),
            "roomTypeId": obj.get("roomTypeId"),
            "minOverlap": obj.get("minOverlap"),
            "maxOverlap": obj.get("maxOverlap"),
            "groupCode": obj.get("groupCode"),
            "days": obj.get("days"),
            "adultDays": obj.get("adultDays"),
            "childDays": obj.get("childDays")
        })
        return _obj


