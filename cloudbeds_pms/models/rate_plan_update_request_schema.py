# coding: utf-8

"""
    Cloudbeds API v2

    <p>Welcome to the documentation for <strong>Cloudbeds API Version v2</strong>! If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data for your Cloudbeds customers, then you've come to the right place.</p><p>In this document you will find all the API methods we provide along with explanations for parameters and response examples.</p><p>If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our <a href='https://integrations.cloudbeds.com/hc/en-us'>Integrations Portal</a>.</p><p>Be sure to <a href='https://go.pardot.com/l/308041/2018-07-24/qb2lg'>subscribe</a> to the monthly Cloudbeds API announcement mailing list to receive information on new additions and improvements to the Cloudbeds API and related developer tools.</p><p><strong>Endpoint:</strong> https://api.cloudbeds.com/{method}</p><p><strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it.</p><p><strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded)</p><p><strong>Response Format:</strong> JSON</p><p><strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support and troubleshooting.</p><p><strong><a href='https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection'><img src='https://run.pstmn.io/button.svg' alt='Run in Postman'></a></strong> use this link to access our Public collection in Postman.</p>

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from cloudbeds_pms.models.rate_plan_addon_request_schema import RatePlanAddonRequestSchema
from typing import Optional, Set
from typing_extensions import Self

class RatePlanUpdateRequestSchema(BaseModel):
    """
    RatePlanUpdateRequestSchema
    """ # noqa: E501
    id: StrictStr = Field(description="Rate Plan ID.")
    is_active: Optional[StrictBool] = Field(default=None, description="Whether the rate plan is active.", alias="isActive")
    promo_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default='true', description="Promotional code for the rate plan.", alias="promoCode")
    sources: Optional[List[StrictStr]] = Field(default=None, description="List of sources for the rate plan.")
    derived_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Value for the derived rate plan.", alias="derivedValue")
    derived_rate_plan_id: Optional[StrictInt] = Field(default=None, description="Derived rate plan ID.", alias="derivedRatePlanId")
    derived_type: Optional[StrictStr] = Field(default='fixed', description="Rate plan derived type.", alias="derivedType")
    name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Name in multiple languages.")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Description in multiple languages.")
    name_private: Optional[Dict[str, StrictStr]] = Field(default=None, description="Internal name in multiple languages.", alias="namePrivate")
    terms: Optional[Dict[str, StrictStr]] = Field(default=None, description="Terms and conditions in multiple languages.")
    addons: Optional[List[RatePlanAddonRequestSchema]] = Field(default=None, description="List of addons for the rate plan.")
    __properties: ClassVar[List[str]] = ["id", "isActive", "promoCode", "sources", "derivedValue", "derivedRatePlanId", "derivedType", "name", "description", "namePrivate", "terms", "addons"]

    @field_validator('derived_type')
    def derived_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fixed', 'percentage']):
            raise ValueError("must be one of enum values ('fixed', 'percentage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RatePlanUpdateRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item_addons in self.addons:
                if _item_addons:
                    _items.append(_item_addons.to_dict())
            _dict['addons'] = _items
        # set to None if promo_code (nullable) is None
        # and model_fields_set contains the field
        if self.promo_code is None and "promo_code" in self.model_fields_set:
            _dict['promoCode'] = None

        # set to None if sources (nullable) is None
        # and model_fields_set contains the field
        if self.sources is None and "sources" in self.model_fields_set:
            _dict['sources'] = None

        # set to None if derived_value (nullable) is None
        # and model_fields_set contains the field
        if self.derived_value is None and "derived_value" in self.model_fields_set:
            _dict['derivedValue'] = None

        # set to None if derived_rate_plan_id (nullable) is None
        # and model_fields_set contains the field
        if self.derived_rate_plan_id is None and "derived_rate_plan_id" in self.model_fields_set:
            _dict['derivedRatePlanId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if name_private (nullable) is None
        # and model_fields_set contains the field
        if self.name_private is None and "name_private" in self.model_fields_set:
            _dict['namePrivate'] = None

        # set to None if terms (nullable) is None
        # and model_fields_set contains the field
        if self.terms is None and "terms" in self.model_fields_set:
            _dict['terms'] = None

        # set to None if addons (nullable) is None
        # and model_fields_set contains the field
        if self.addons is None and "addons" in self.model_fields_set:
            _dict['addons'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RatePlanUpdateRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isActive": obj.get("isActive"),
            "promoCode": obj.get("promoCode") if obj.get("promoCode") is not None else 'true',
            "sources": obj.get("sources"),
            "derivedValue": obj.get("derivedValue") if obj.get("derivedValue") is not None else 0,
            "derivedRatePlanId": obj.get("derivedRatePlanId"),
            "derivedType": obj.get("derivedType") if obj.get("derivedType") is not None else 'fixed',
            "name": obj.get("name"),
            "description": obj.get("description"),
            "namePrivate": obj.get("namePrivate"),
            "terms": obj.get("terms"),
            "addons": [RatePlanAddonRequestSchema.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None
        })
        return _obj


